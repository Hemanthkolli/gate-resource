#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/gate-resource-request.XXXXXX)
cat > $payload <&0

# parse parameters
gate=$(jq -r '.source.gate // ""' < $payload)
version=$(jq -r '.version' < $payload)
version_ref=$(jq -r '.version.ref' < $payload)

if [ "$version_ref" == "none" ]; then 
  echo "version.ref is none, nothing to do"
  passed_item="none"
else
  # extract git configuration and pass it to git resource
  git_source=$(cat "$payload" | jq -r .source.git)
  git_payload=$(echo '{
      "source": '$git_source',
      "version": '$version',
      "params": {
        "disable_git_lfs": true,
        "submodules": "none"
      }
    }' | jq -r)

  # forward to git-resource to let it fetch the repository
  echo "$git_payload" | /opt/git-resource/in $destination

  cd $destination

  # ref is available, identify the value that passsed the gate
  # emit the item that passed gate based on the file changed in the commit fetched

  echo "finding passed file"

  # note: if no file can be found that changed at this revision in the gate, assume it's "none"
  # this is a workaround for emitting "empty" versions, e.g. when `out` did put a .autoclose file
  # or an `out` invocation did not update any autoclose gates when it was invoked with `update_autoclose: true`
  passed_file=$(git diff-tree --no-commit-id --name-only -r "$version_ref" | grep "$gate/" || true)
  if [ -z "$passed_file" ]; then 
    echo "could not determine passed file in version $version_ref"
    exit 1
  fi
  passed_item=$(basename $passed_file)

  # write two files, passed (item name) and metadata (item file)
  if [ ! "$passed_file" == "none" ]; then 
    echo "$passed_item" > passed
    cp "$passed_file" metadata
  fi
fi

gate_meta=$(jq -n "[
  { name: \"gate\", value: \"$gate\" },
  { name: \"passed\", value: \"$passed_item\" }
]")

jq -n "{
  version: $version,
  metadata: $gate_meta
}" >&3
