#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

shopt -s nullglob

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/gate-resource-request.XXXXXX)
cat > $payload <&0

# parse parameters
gate=$(jq -r '.source.gate // ""' < $payload)
item_file=$(jq -r '.params.item_file // ""' < $payload)
update_autoclose=$(jq -r '.params.update_autoclose // ""' < $payload)
git_source=$(jq -r .source.git < $payload)
branch=$(jq -r '.source.git.branch // ""' < $payload)
uri=$(jq -r '.source.git.uri // ""' < $payload)

if [[ -z "$item_file" && -z "$update_autoclose" ]]; then
  echo "invalid payload (missing item_file or update_autoclose):" >&2
  cat $payload >&2
  exit 1
fi

clone() {
  local git_source="$1"
  local repository="$2"
  # specify no version, we clone at HEAD
  git_payload=$(echo '{ "source": '$git_source' }' | jq -r)

  # forward to git-resource to let it fetch the repository
  # note tat a side-effect of this is that the global git configuration gets changed
  echo "$git_payload" | /opt/git-resource/in $repository  
}

commit() {
  local repository="$1"
  local msg="$2"
  git -C "$repository" add .
  git -C "$repository" status
  if [ -z "$(git -C "$repository" status --porcelain)" ]; then 
    echo "nothing to commit - skipping"
  else 
    git -C "$repository" commit -m "$msg"
  fi
}

try_autoclose() {
  local repository="$1"
  local item="$2"

  # we process all items as this helps debuggability
  local passed=true
  echo ""
  echo "try autoclose: $item"
  echo "----------------------"
  while IFS="" read -r p || [ -n "$p" ]
  do
    echo -n "- testing $p: "
    if [[ ! -e "$repository/$p" ]]; then
      echo "fail"
      passed=false
      break;
    fi;
    echo "ok"
  done < "$item"

  if [ $passed = true ]; then 
    echo "=> autoclosing $item"
    mv "$item" "${item//\.autoclose/}"

    commit "$repository" "autoclosed $item"
  fi
}

repository=$(mktemp -d "$TMPDIR/gate-resource-repo.XXXXXX")
clone "$git_source" "$repository"

cd "$source"

result_ref=""
result_meta="[]"

if [ ! -z "$item_file" ]; then
  # dervice item name, note that item_file may contain wildcards so it must be unquoted here
  item=$(basename $item_file)

  # write gate status
  mkdir -p "$repository/$gate"                 # ensure gate-directory exists
  cp $item_file "$repository/$gate/$item"      # item_file should be interpolated, so we don't quote it

  commit "$repository" "$item passed gate $gate"

  # note: gate item pushes may be safely rebased
  git_payload=$(jq -n "{
    source: $git_source,
    params: {
      repository: $(echo $repository | jq -R .),
      rebase: true
    }
  }")

  # forward to git-resource to let it push
  git_result=$(echo "$git_payload" | /opt/git-resource/out $source)
  result_item=$item
  result_ref=$(echo $git_result | jq -r .version.ref)
else
  git -C $repository remote add push-target $uri

  while true; do
    echo "processing autoclose gates..."
    git -C $repository pull push-target $branch
    git -C $repository clean --force --force -d

    for item in $repository/$gate/*.autoclose; do
      try_autoclose $repository $item
    done

    # autoclose gates may not be rebased
    git_payload=$(jq -n "{
      source: $git_source,
      params: {
        repository: $(echo $repository | jq -R .)
      }
    }")

    # we may have closed multiple gates at once. However, it's important
    # that we only emit the _first_ gate that we closed so that the resource can 
    # still be checked using `version: every` for all following gates that were closed

    # find first autoclose commit, this is the first commit after origin/master
    gate_ref=$(git -C $repository rev-list --ancestry-path push-target/$branch..HEAD | tail -n 1)
    if [ -z $gate_ref ]; then
      # we did not close any gates, return the current HEAD revision
      # concourse will detect this resource version as already existing and won't trigger anything
      echo "no autoclose items were closed"
      result_item="none"
      result_ref="none"
      break
    else
      # try push
      if [ $(git -C $repository push push-target $branch ) ]; then
        echo "pushing failed, retrying"
        git -C $repository reset --hard push-target/$branch
        continue
      fi
      echo "pushing succeeded"

      passed_file=$(git -C "$repository" diff-tree --no-commit-id --name-only -r "$gate_ref" | grep "$gate")
      result_item=$(basename $passed_file)
      result_ref=$gate_ref
      break
    fi
  done
fi

# return result
result_meta=$(jq -n "[
  { name: \"gate\", value: \"$gate\" },
  { name: \"passed\", value: \"$result_item\" }
]")

jq -n "{
  version: { ref: $(echo $result_ref | jq -R .) },
  metadata: $result_meta
}" >&3